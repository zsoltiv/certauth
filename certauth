#!/bin/sh


# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.


# script for managing certificates braindead easily using OpenSSL


CA_ROOT="${HOME}/.config/certauth"
CA_FILE="root"
# how long a cert is active
CA_DAYS="1984"
# strength, at least 2048 bits is recommended
CA_BITS="4096"
# put `nopass` and the like in here
CA_CLIENT_ARGS="nopass"
# certificate data
# country
CA_C="HU"
# state
CA_ST="Budapest"
# city
CA_L="Budapest"
# organization
CA_O="My Org"
# unit
CA_OU="My Team"


init() {
    echo "Creating ${CA_ROOT}"
    mkdir -p "$CA_ROOT"
    local key="${CA_ROOT}/${CA_FILE}.key"
    echo "Generating root certificate..."
    openssl genrsa -des3 -out "$key" "$CA_BITS"
    local cert="${CA_ROOT}/${CA_FILE}.crt"
    openssl req -x509 -new -nodes -key "$key" -sha256 -days "$CA_DAYS" -out "$cert"
    echo "Successfully initialized local CA"
    echo "Install your certificate (${cert}) on clients to accept certificates signed by this CA"
}

clean() {
    #######################
    # Deletes the CA root #
    #######################

    echo "! WARNING: DO YOU REALLY WANT TO DELETE ${CA_ROOT}?"
    echo "! THIS CANNOT BE UNDONE"
    read -p "[yes/no]: " choice
    if [ "$choice" = "yes" ] || [ "$choice" = "YES" ] ; then
        rm -rf "$CA_ROOT"
    fi
}

inited() {
    [ ! -d "$CA_ROOT" ] && echo "${CA_ROOT} doesn't exist" && echo "Run \`${0} init\`" && exit 1
}

mkcert() {
    #######################################################
    # Creates a new certificate for a client and signs it #
    #######################################################

    inited

    local clientdir="${CA_ROOT}/${1}"
    if [ ! -d "$clientdir" ] ; then
        mkdir -p "$clientdir"
        echo "Creating ${clientdir}"
        local client_file="${clientdir}/${1}"
        local key="${client_file}.key"
        echo "Generating client certificate..."
        openssl genrsa -out "$key" "$CA_BITS"
        echo "Creating certificate signing request..."
        local csr="${client_file}.csr"
        openssl req -new -key "$key" \
            -subj "/C=${CA_C}/ST=${CA_ST}/L=${CA_L}/O=${CA_O}/ON=${CA_ON}" \
            -out "$csr"
        echo "Signing certificate..."
        local cert="${client_file}.crt"
        openssl x509 -req -in "$csr" \
            -CA "${CA_ROOT}/root.pem" \
            -CAkey "${CA_ROOT}/root.key" -CAcreateserial -out "$cert" \
            -days "$CA_DAYS" -sha256
    else
        echo "${clientdir} already exists!"
    fi
}

dh() {
    inited

    openssl dhparam -out "${CA_ROOT}/dh${CA_BITS}.pem" "$CA_BITS"
}

if [ $# -ne 0 ] ; then
    case "$1" in
        "init" )
            init ;;
        "clean" )
            clean ;;
        "create" )
            if [ $# -eq 2 ] ; then
                mkcert "$2"
            fi ;;
        "dh" )
            dh ;;
        * )
            echo "${1}: invalid argument" ;;
    esac
else
    echo "Parameters:
init          - Initialize certauth in ${CA_ROOT}
clean         - wipe ${CA_ROOT}
create [name] - create a signed keypair in ${CA_ROOT}/name
dh            - create DH parameter file"
fi
